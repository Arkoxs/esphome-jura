substitutions:
  devicename: jura
  upper_devicename: Jura
  friendly_name: "Jura Coffee Machine"
  device_description: "Jura Coffee Machine status"
  device_comment: "Jura Coffee Machine status"
  api_encryption_key: !secret api_encryption
  ota_password: !secret ota_password
  wifi_ssid: !secret wifi_ssid
  wifi_password: !secret wifi_password
  wifi_fallback_password: !secret fallback_password


esp8266:
  board: d1_mini
  restore_from_flash: True

<<: !include common/common.yaml
<<: !include common/homeassistant.yaml
<<: !include common/default-sensors.yaml


esphome:
  name: $devicename
  comment: ${device_description}
  platformio_options:
    upload_speed: 115200
  includes:
    - jura.h

# Exposed switches.
switch:
  # Switch to start the Jura.
  - platform: restart
    name: $upper_devicename Restart
  - platform: gpio
    #name: "Power-On Relay"
    id: relay
    pin: D5
    on_turn_on: 
      then:
        - delay: 
            milliseconds: 50
        - switch.turn_off: relay
  - platform: template
    name: 'Coffee Machine'
    #icon: "mdi:coffee-maker"
    id: jura_on_off_switch
    icon: "mdi:power"
    turn_on_action:
      - switch.turn_on: relay
    turn_off_action:
      - uart.write: [0xDF, 0xDB, 0xDB, 0xDF]  ## 'A'
      - delay: 8ms
      - uart.write: [0xFB, 0xFF, 0xDB, 0xDF]  ## 'N'
      - delay: 8ms
      - uart.write: [0xFB, 0xFB, 0xFF, 0xDB]  ## ':'
      - delay: 8ms
      - uart.write: [0xDB, 0xDB, 0xFF, 0xDB]  ## '0'
      - delay: 8ms
      - uart.write: [0xFB, 0xDB, 0xFF, 0xDB]  ## '2'
      - delay: 8ms
      - uart.write: [0xDF, 0xFF, 0xDB, 0xDB]  ## '\r'
      - delay: 8ms
      - uart.write: [0xFB, 0xFB, 0xDB, 0xDB]  ## '\n'
    optimistic: true
    assumed_state: true


uart:
  tx_pin: D6
  rx_pin: D7
  baud_rate: 9600
  id: uart_bus

sensor:
  - platform: uptime
    name: "${friendly_name} Uptime"

  - platform: wifi_signal
    name: "${friendly_name} WiFi Signal"
    update_interval: 60s

  - platform: template
    id: num_single_espresso
    name: "Single Espressos Made"
    accuracy_decimals: 0
    lambda: "return {};"

  - platform: template
    id: num_double_espresso
    name: "Double Espressos Made"
    accuracy_decimals: 0
    lambda: "return {};"

  - platform: template
    id: num_coffee
    name: "Coffees Made"
    accuracy_decimals: 0
    lambda: "return {};"

  - platform: template
    id: num_double_coffee
    name: "Double Coffees Made"
    accuracy_decimals: 0
    lambda: "return {};"

  - platform: template
    id: num_clean
    name: "Until Cleaning"
    accuracy_decimals: 0
    lambda: "return {};"

text_sensor:
  - platform: version
    name: "${friendly_name} ESPHome version"
    
  - platform: template
    id: tray_status
    name: "Tray Status"
    lambda: "return {};"
    
  - platform: template
    id: tank_status
    name: "Water Tank Status"
    lambda: "return {};"

  - platform: template
    id: heat_status
    name: "Boiler Status"
    lambda: "return {};"

  - platform: template
    id: beans_status
    name: "Coffeebeans Status"
    lambda: "return {};"

  - platform: template
    id: rinse_status
    name: "Rinse Status"
    lambda: "return {};"

binary_sensor:
  - platform: status
    name: "${friendly_name} Status"

# Custom component to poll coffee machine counters & status
custom_component:
- lambda: |-
    auto my_jura = new JuraCoffee(id(uart_bus),id(num_single_espresso),id(num_double_espresso),id(num_coffee),id(num_double_coffee),id(num_clean),id(tray_status),id(tank_status),id(heat_status),id(beans_status),id(rinse_status));
    App.register_component(my_jura);
    return {my_jura};
